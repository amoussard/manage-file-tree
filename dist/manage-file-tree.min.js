function Node(a){this.value="./",void 0!==a&&(this.value=a),this.anchor=void 0,this.sons=[]}function Tree(a){this.root=new Node(a),this.attributes={}}function Visitor(){}function UpdateVisitor(a){this.path=[],this.origin=a}Node.prototype.getValue=function(){return this.value},Node.prototype.getSons=function(){return this.sons},Node.prototype.add=function(a){if(0!==a.length){var b=a.shift(),c=this.getSon(b);c?c.add(a):(c=new Node(b),this.sons.push(c),c.add(a))}},Node.prototype.getSon=function(a){for(var b in this.sons)if(this.sons[b].getValue()==a)return this.sons[b];return!1},Node.prototype.isLeaf=function(){return 0===this.sons.length},Node.prototype.accept=function(a,b){var c;if(b)for(c in this.sons)this.sons[c].accept(a);else{if(a.begin(this),!this.isLeaf()){a.visitBeforeSons(this);for(c in this.sons)this.sons[c].accept(a);a.visitAfterSons(this)}a.end(this)}},Tree.prototype.getRoot=function(){return this.root},Tree.prototype.add=function(a){var b=a.split("/");this.root.add(b)},Tree.prototype.accept=function(a){this.root.accept(a,!0)},Visitor.prototype.visitBeforeSons=function(){},Visitor.prototype.visitAfterSons=function(){},Visitor.prototype.begin=function(){},Visitor.prototype.end=function(){},UpdateVisitor.prototype=new Visitor,UpdateVisitor.prototype.visitBeforeSons=function(a){this.path.push(a.getValue())},UpdateVisitor.prototype.visitAfterSons=function(){this.path.pop()},UpdateVisitor.prototype.begin=function(){},UpdateVisitor.prototype.end=function(){};var FileTree=function(){new UpdateVisitor;return{init:this.init,setTree:this.setTree,acceptVisitor:this.acceptVisitor}}();